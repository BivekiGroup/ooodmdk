---
import {
  buildLocalizedLink,
  defaultLocale,
  getTranslations,
  localeOptions,
  normalizeLocale,
  stripLocaleFromPath,
} from "../i18n";

const baseLocale = Astro.locals.baseLocale ?? defaultLocale;
const lang = normalizeLocale(Astro.props.lang ?? baseLocale);
const locale = getTranslations(lang);
const navLinks = [
  { href: "/#about", label: locale.header.nav.about },
  { href: "/products", label: locale.header.nav.products },
  { href: "/blog", label: locale.header.nav.blog },
  { href: "/faq", label: locale.header.nav.faq },
  { href: "/#contacts", label: locale.header.nav.contacts },
];

const modalCopy = locale.header.modal.messages;
const fieldLabels = modalCopy.fieldLabels;

const pathname = Astro.url.pathname;
const basePath = stripLocaleFromPath(pathname);
const search = Astro.url.search ?? "";
const hash = Astro.url.hash ?? "";
const localizedPath = `${basePath}${search}${hash}`;
const buildLink = (href: string, targetLocale = lang) =>
  buildLocalizedLink(href, targetLocale, baseLocale);
const languageLinks = localeOptions.map((option) => {
  const normalized = normalizeLocale(option.value);
  return {
    ...option,
    href: buildLocalizedLink(localizedPath || "/", normalized, baseLocale),
    active: normalized === lang,
  };
});
---

<!-- Модальное окно -->
<div
  id="modal"
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
>
  <div
    class="bg-gray-100 rounded-xl p-8 max-w-md w-full mx-4 lg:mx-auto relative"
  >
    <button
      id="closeModal"
      class="absolute top-4 right-4 text-gray-600 hover:text-gray-900"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <h2 class="text-3xl font-semibold mb-4 text-center font-gilroy text-gray-900">
      {locale.header.modal.title}
    </h2>
    <ul class="text-gray-800 mb-6 space-y-2 font-gilroy text-center">
      {locale.header.modal.bullets.map((item) => (
        <li>{item}</li>
      ))}
    </ul>
    <form id="contactForm" class="space-y-4">
      <input
        type="text"
        id="name"
        name="name"
        placeholder={locale.header.modal.form.name}
        autocomplete="name"
        class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 font-gilroy text-gray-900 placeholder:text-gray-500"
        required
      />
      <input
        type="tel"
        id="phone"
        name="phone"
        placeholder={locale.header.modal.form.phone}
        autocomplete="tel"
        inputmode="tel"
        class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 font-gilroy text-gray-900 placeholder:text-gray-500"
        required
      />
      <input
        type="email"
        id="email"
        name="email"
        placeholder={locale.header.modal.form.email}
        autocomplete="email"
        class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 font-gilroy text-gray-900 placeholder:text-gray-500"
      />
      <textarea
        id="comment"
        name="comment"
        placeholder={locale.header.modal.form.comment}
        rows="4"
        class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 font-gilroy text-gray-900 placeholder:text-gray-500 resize-none"
      ></textarea>
      <div>
        <label for="attachment" class="block text-sm font-gilroy text-gray-600 mb-2">
          {locale.header.modal.form.fileLabel}
        </label>
        <input
          type="file"
          id="attachment"
          name="attachment"
          accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg,.txt"
          class="block w-full text-sm text-gray-600 font-gilroy file:mr-4 file:rounded-md file:border-0 file:bg-yellow-500 file:text-black file:px-4 file:py-2 file:text-sm file:font-semibold file:cursor-pointer cursor-pointer"
        />
        <p class="mt-1 text-xs text-gray-500 font-gilroy">
          {locale.header.modal.form.fileHint}
        </p>
      </div>
      <button
        type="submit"
        class="w-full py-3 bg-yellow-500 text-white rounded-lg font-semibold text-lg hover:bg-yellow-600 transition font-gilroy"
      >
        {locale.header.modal.form.submit}
      </button>
    </form>
  </div>
</div>

<header
  class="fixed text-white top-1 xs:top-2 sm:top-3 md:top-4 left-1/2 transform -translate-x-1/2 w-[95%] xs:w-11/12 max-w-screen-xl z-50 flex justify-between items-center px-2 py-1.5 xs:px-3 xs:py-2 sm:px-4 sm:py-3 md:px-6 md:py-4 bg-black bg-opacity-70 backdrop-blur-sm rounded-lg xs:rounded-xl sm:rounded-2xl border border-white border-opacity-20"
>
  <a href={buildLink("/")} class="flex items-center min-w-0 flex-shrink-0">
    <img src="/logo.svg" alt={locale.header.company} class="h-5 xs:h-6 sm:h-8 md:h-10 lg:h-12 flex-shrink-0" />
    <span class="ml-1 xs:ml-1.5 sm:ml-2 font-bold text-sm xs:text-base sm:text-lg md:text-xl lg:text-2xl font-gilroy truncate">
      {locale.header.company}
    </span>
  </a>

  <nav class="hidden lg:flex items-center space-x-6">
    <ul class="flex text-lg space-x-8">
      {navLinks.map((link, index) => (
        <li class:list={[index === navLinks.length - 1 && "relative group"]}>
          <a
            href={buildLink(link.href)}
            class="hover:text-yellow-400 font-gilroy transition-colors"
          >
            {link.label}
          </a>
          {index === navLinks.length - 1 && (
            <div
          class="absolute invisible group-hover:visible opacity-0 group-hover:opacity-100 bg-black bg-opacity-90 backdrop-blur-sm text-white p-6 rounded-xl mt-2 w-80 left-1/2 transform -translate-x-1/2 transition-all duration-300 ease-in-out scale-95 group-hover:scale-100 border border-white border-opacity-20"
        >
          <div class="flex justify-center items-center mb-4">
            <img src="/logo.svg" alt={locale.header.company} class="h-8" />
            <span class="ml-2 font-bold font-gilroy">{locale.header.company}</span>
          </div>
          <div class="space-y-2 text-center font-gilroy">
            <p>+7 (925) 104-50-50</p>
            <p>+7 (926) 664-62-46</p>
            <p>ooo.dmdk@mail.ru</p>
            <p>
              {locale.header.contactCard.schedule}<br />
              <span class="text-lg">{locale.header.contactCard.hours}</span>
            </p>
          </div>
          <div class="flex justify-center space-x-4 mt-4">
            <a href="https://t.me/OOO_DMDK" class="social-icon">
              <img
                src="/icons/tg.svg"
                alt="Telegram"
                class="w-8 h-8"
              />
            </a>
            <a href="https://wa.me/79251045050" class="social-icon">
              <img
                src="/icons/ws.svg"
                alt="WhatsApp"
                class="w-8 h-8"
              />
            </a>
          </div>
            </div>
          )}
        </li>
      ))}
    </ul>

    <div class="flex items-center space-x-2">
      {languageLinks.map((option) => (
        <a
          href={option.href}
          class:list={[
            "inline-flex items-center px-2.5 py-1.5 text-sm font-gilroy rounded-md border transition-colors duration-200",
            option.active
              ? "bg-yellow-400 text-black border-yellow-300"
              : "text-white border-white/20 hover:text-yellow-400",
          ]}
        >
          {option.nativeLabel}
        </a>
      ))}
    </div>

    <!-- Кнопка "Оставить заявку" -->
    <button
      class="open-modal ml-6 px-4 py-2 xl:px-6 xl:py-3 text-base xl:text-lg font-semibold bg-gradient-to-r from-yellow-500 via-yellow-600 to-yellow-700 text-white rounded-lg shadow-lg shadow-yellow-500/50 hover:shadow-xl hover:shadow-yellow-400/70 hover:bg-opacity-90 transition-all duration-300 font-gilroy"
    >
      {locale.header.callToAction}
    </button>
  </nav>

  <!-- Кнопка мобильного меню -->
  <div class="lg:hidden flex items-center space-x-2">
    <!-- Компактная кнопка заявки для планшетов -->
    <button class="open-modal hidden md:block lg:hidden px-3 py-2 text-sm font-semibold bg-gradient-to-r from-yellow-500 via-yellow-600 to-yellow-700 text-white rounded-lg shadow-lg shadow-yellow-500/50 hover:shadow-xl hover:shadow-yellow-400/70 hover:bg-opacity-90 transition-all duration-300 font-gilroy">
      {locale.header.mobile.request}
    </button>
    
    <button id="menu-toggle" class="focus:outline-none p-1 hover:text-yellow-400 transition-colors">
      <svg
        class="w-5 h-5 xs:w-6 xs:h-6 sm:w-7 sm:h-7 md:w-8 md:h-8"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16m-7 6h7"></path>
      </svg>
    </button>
  </div>
</header>

<div
  id="mobile-menu"
  class="fixed inset-0 bg-black bg-opacity-95 backdrop-blur-sm text-white flex flex-col justify-center items-center space-y-4 xs:space-y-6 md:space-y-8 transform translate-y-full transition-transform duration-300 ease-in-out z-50"
>
  <button id="close-menu" class="absolute top-4 xs:top-6 right-4 xs:right-6 text-white hover:text-yellow-400 transition-colors">
    <svg class="w-6 h-6 xs:w-7 xs:h-7 sm:w-8 sm:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>
  
  <!-- Логотип в мобильном меню -->
  <div class="flex items-center mb-4 xs:mb-6">
    <img src="/logo.svg" alt={locale.header.company} class="h-8 xs:h-10 sm:h-12" />
    <span class="ml-2 xs:ml-3 font-bold text-lg xs:text-xl sm:text-2xl font-gilroy">{locale.header.company}</span>
  </div>
  
  {navLinks.map((link) => (
    <a
      href={buildLink(link.href)}
      class="text-lg xs:text-xl sm:text-2xl font-gilroy hover:text-yellow-400 transition-colors mobile-menu-link"
    >
      {link.label}
    </a>
  ))}
  
  <div class="flex items-center space-x-3 xs:space-x-4 md:space-x-6">
    {languageLinks.map((option) => (
      <a
        href={option.href}
        class:list={[
          "inline-flex items-center px-3 py-2 text-base font-gilroy rounded-md border transition-colors duration-200",
          option.active
            ? "bg-yellow-400 text-black border-yellow-300"
            : "text-white border-white/20 hover:text-yellow-400",
        ]}
      >
        {option.nativeLabel}
      </a>
    ))}
  </div>

  <!-- Контактная информация в мобильном меню -->
  <div class="mt-6 xs:mt-8 text-center space-y-2 xs:space-y-3">
    <div class="text-sm xs:text-base text-gray-300 font-gilroy">
      <p>+7 (925) 104-50-50</p>
      <p>+7 (926) 664-62-46</p>
      <p>ooo.dmdk@mail.ru</p>
    </div>
    <div class="flex justify-center space-x-4 mt-4">
      <a href="https://t.me/OOO_DMDK" class="social-icon">
        <img src="/icons/tg.svg" alt="Telegram" class="w-8 h-8" />
      </a>
      <a href="https://wa.me/79251045050" class="social-icon">
        <img src="/icons/ws.svg" alt="WhatsApp" class="w-8 h-8" />
      </a>
    </div>
  </div>
  
  <!-- Кнопка "Оставить заявку" в мобильном меню -->
  <button
    class="open-modal mt-6 xs:mt-8 px-6 xs:px-8 py-3 xs:py-4 text-base xs:text-lg font-semibold bg-gradient-to-r from-yellow-500 via-yellow-600 to-yellow-700 text-white rounded-lg xs:rounded-xl shadow-lg shadow-yellow-500/50 hover:shadow-xl hover:shadow-yellow-400/70 hover:bg-opacity-90 transition-all duration-300 font-gilroy"
  >
    {locale.header.callToAction}
  </button>
</div>

<script type="application/json" id="header-modal-config">
  {JSON.stringify(locale.header.modal.messages)}
</script>

<script>
  const headerModalConfigElement = document.getElementById('header-modal-config');
  let modalMessages = {
    incompletePhone: 'Please provide a full phone number.',
    success: 'Request sent successfully!',
    error: 'An error occurred. Please try again.',
    fileError: 'Request sent but the attachment could not be uploaded. Please try again or contact us directly.',
    title: 'New request',
    fieldLabels: {
      name: 'Name',
      phone: 'Phone',
      email: 'Email',
      comment: 'Comment',
      file: 'File',
    },
  };

  if (headerModalConfigElement?.textContent) {
    try {
      modalMessages = JSON.parse(headerModalConfigElement.textContent);
    } catch (error) {
      console.error('Failed to parse header modal config', error);
    }
  }

  const fieldLabels = {
    name: modalMessages.fieldLabels?.name ?? 'Name',
    phone: modalMessages.fieldLabels?.phone ?? 'Phone',
    email: modalMessages.fieldLabels?.email ?? 'Email',
    comment: modalMessages.fieldLabels?.comment ?? 'Comment',
    file: modalMessages.fieldLabels?.file ?? 'File',
  };

  type ToastVariant = 'success' | 'error' | 'info';
  const globalToastScope = window as typeof window & {
    showToast?: (message: string, variant?: ToastVariant) => void;
  };

  if (!globalToastScope.showToast) {
    const ensureToastEnvironment = () => {
      if (!document.getElementById('global-toast-styles')) {
        const style = document.createElement('style');
        style.id = 'global-toast-styles';
        style.textContent = `
.toast-container{position:fixed;top:1.25rem;right:1.25rem;z-index:9999;display:flex;flex-direction:column;gap:0.75rem;align-items:flex-end;pointer-events:none}
.toast{min-width:280px;max-width:360px;padding:0.85rem 1.1rem;border-radius:0.9rem;background:rgba(15,15,15,0.92);color:#fff;box-shadow:0 12px 30px rgba(0,0,0,0.28);opacity:0;transform:translateY(-12px);transition:opacity .3s ease,transform .3s ease;pointer-events:auto;font-family:var(--toast-font,'Gilroy',system-ui);backdrop-filter:blur(12px);border:1px solid rgba(255,255,255,0.08)}
.toast--success{background:linear-gradient(135deg,#16a34a,#15803d)}
.toast--error{background:linear-gradient(135deg,#ef4444,#991b1b)}
.toast--info{background:linear-gradient(135deg,#facc15,#b45309);color:#111}
.toast__message{font-size:0.95rem;line-height:1.4;white-space:pre-line;margin:0}
.toast.show{opacity:1;transform:translateY(0)}
`;
        document.head.appendChild(style);
      }

      let container = document.querySelector('.toast-container') as HTMLDivElement | null;
      if (!container) {
        container = document.createElement('div');
        container.className = 'toast-container';
        document.body.appendChild(container);
      }

      return container;
    };

    globalToastScope.showToast = (message: string, variant: ToastVariant = 'info') => {
      const container = ensureToastEnvironment();
      const toast = document.createElement('div');
      toast.className = `toast toast--${variant}`;

      const text = document.createElement('p');
      text.className = 'toast__message';
      text.textContent = message;

      toast.appendChild(text);
      container.appendChild(toast);

      requestAnimationFrame(() => {
        toast.classList.add('show');
      });

      const dismiss = () => {
        toast.classList.remove('show');
        setTimeout(() => {
          toast.remove();
          if (!container?.children.length) {
            container.remove();
          }
        }, 300);
      };

      setTimeout(dismiss, 4500);
      toast.addEventListener('click', dismiss);
    };
  }

  const showToast = (message: string, variant: ToastVariant = 'info') => {
    globalToastScope.showToast?.(message, variant);
  };

  // Получение всех кнопок с классом "open-modal"
  const openModalButtons = document.querySelectorAll(".open-modal");
  const closeModalBtn = document.getElementById("closeModal");
  const modal = document.getElementById("modal");
  const contactForm = document.getElementById("contactForm") as HTMLFormElement;
  const phoneInput = document.getElementById("phone") as HTMLInputElement | null;
  const commentInput = document.getElementById("comment") as HTMLTextAreaElement | null;
  const attachmentInput = document.getElementById("attachment") as HTMLInputElement | null;

  // Простая маска для российского номера телефона
  const formatPhoneNumber = (value: string) => {
    const digits = value.replace(/\D/g, "");
    let numbers = digits;

    if (numbers.startsWith("7")) {
      numbers = numbers.substring(1);
    } else if (numbers.startsWith("8")) {
      numbers = numbers.substring(1);
    }

    numbers = numbers.substring(0, 10);

    const part1 = numbers.substring(0, Math.min(3, numbers.length));
    const part2 = numbers.substring(3, Math.min(6, numbers.length));
    const part3 = numbers.substring(6, Math.min(8, numbers.length));
    const part4 = numbers.substring(8, Math.min(10, numbers.length));

    let formatted = "+7";

    if (part1) {
      formatted += ` (${part1}`;
      if (part1.length === 3) {
        formatted += ")";
      }
    }

    if (part2) {
      const separator = part1.length === 3 ? " " : "";
      formatted += `${separator}${part2}`;
    }

    if (part3) {
      formatted += `-${part3}`;
    }

    if (part4) {
      formatted += `-${part4}`;
    }

    return formatted;
  };

  phoneInput?.addEventListener("focus", () => {
    if (!phoneInput.value) {
      phoneInput.value = "+7";
    }
  });

  phoneInput?.addEventListener("blur", () => {
    if (phoneInput.value === "+7" || phoneInput.value === "+7 ") {
      phoneInput.value = "";
    }
  });

  phoneInput?.addEventListener("input", () => {
    phoneInput.value = formatPhoneNumber(phoneInput.value);
  });

  // Привязка события открытия модального окна ко всем кнопкам
  openModalButtons.forEach((button) => {
    button.addEventListener("click", () => {
      modal?.classList.remove("hidden");
    });
  });

  // Закрытие модального окна при клике на крестик
  closeModalBtn?.addEventListener("click", () => {
    modal?.classList.add("hidden");
  });

  // Закрытие модального окна при клике на фон
  modal?.addEventListener("click", (e) => {
    if (e.target === modal) {
      modal.classList.add("hidden");
    }
  });

  // Отправка данных в Telegram
  contactForm?.addEventListener("submit", function (e) {
    e.preventDefault();

    const nameInput = document.getElementById("name") as HTMLInputElement;
    const emailInput = document.getElementById("email") as HTMLInputElement;

    const name = nameInput?.value.trim() || "";
    const phone = phoneInput?.value.trim() || "";
    const email = emailInput?.value.trim() || "";
    const comment = commentInput?.value.trim() || "";
    const attachment = attachmentInput?.files?.[0] ?? null;

    const phoneDigits = phone.replace(/\D/g, "");
    if (phoneDigits.length < 11) {
      showToast(modalMessages.incompletePhone, 'error');
      phoneInput?.focus();
      return;
    }

    const messageLines = [
      `${fieldLabels.name}: ${name}`,
      phone ? `${fieldLabels.phone}: ${phone}` : null,
      email ? `${fieldLabels.email}: ${email}` : null,
      comment ? `${fieldLabels.comment}: ${comment}` : null,
      attachment ? `${fieldLabels.file}: ${attachment.name}` : null,
    ].filter(Boolean);

    const messageBody = messageLines.join("\n");
    const message = `${modalMessages.title}:\n\n${messageBody}`;

    const token = "7413445274:AAGFPUJZypcq5fG6r-Eq6pu81RHf6GOW2oU";
    const chatId = "-1002176656869";
    const url = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(
      message,
    )}`;

    const finalizeSuccess = () => {
      showToast(modalMessages.success, 'success');
      contactForm?.reset();
      modal?.classList.add("hidden");
    };

    fetch(url)
      .then((response) => {
        if (!response.ok) {
          throw new Error("requestFailed");
        }

        if (!attachment) {
          finalizeSuccess();
          return;
        }

        const formData = new FormData();
        formData.append("chat_id", chatId);
        formData.append("document", attachment);
        const caption = message.length > 1024 ? message.slice(0, 1024) : message;
        formData.append("caption", caption);

        return fetch(`https://api.telegram.org/bot${token}/sendDocument`, {
          method: "POST",
          body: formData,
        }).then((docResponse) => {
          if (!docResponse.ok) {
            throw new Error("fileFailed");
          }
          finalizeSuccess();
        });
      })
      .catch((error) => {
        console.error("Error:", error);
        const errorKey = error instanceof Error ? error.message : "";
        if (errorKey === "fileFailed") {
          showToast(modalMessages.fileError ?? modalMessages.error, 'error');
        } else {
          showToast(modalMessages.error, 'error');
        }
      });
  });

  // Функционал мобильного меню
  const menuToggle = document.getElementById("menu-toggle");
  const mobileMenu = document.getElementById("mobile-menu");
  const closeMenu = document.getElementById("close-menu");
  const mobileMenuLinks = document.querySelectorAll(".mobile-menu-link");

  // Функция для открытия мобильного меню
  function openMobileMenu() {
    mobileMenu?.classList.remove("translate-y-full");
    mobileMenu?.classList.add("translate-y-0");
    document.body.style.overflow = "hidden"; // Блокируем скролл
  }

  // Функция для закрытия мобильного меню
  function closeMobileMenu() {
    mobileMenu?.classList.add("translate-y-full");
    mobileMenu?.classList.remove("translate-y-0");
    document.body.style.overflow = ""; // Разблокируем скролл
  }

  // Открытие мобильного меню
  menuToggle?.addEventListener("click", openMobileMenu);

  // Закрытие мобильного меню по кнопке закрытия
  closeMenu?.addEventListener("click", closeMobileMenu);

  // Закрытие мобильного меню при клике на ссылку
  mobileMenuLinks.forEach((link) => {
    link.addEventListener("click", closeMobileMenu);
  });

  // Закрытие мобильного меню при изменении размера экрана на десктопный
  window.addEventListener("resize", () => {
    if (window.innerWidth >= 1028) { // lg breakpoint
      closeMobileMenu();
    }
  });
</script>
